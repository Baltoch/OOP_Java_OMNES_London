/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package tutorial7;

import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;

/**
 *
 * @author balth
 */

/**
 * @hidden
 * Gadgets by Mail sells many interesting items through its catalogs. Write an application that prompts the user for 
 * order details, including item numbers and quantity of each item ordered, based on the available items shown in Table 
 * 
 *      Item #          Description                                                 Price ($)
 *      101              Electric hand warmer                              12.99
 *      124              Battery-operated plant waterer            7.55
 *      256              Gerbil trimmer                                            9.99
 *      512              Talking bookmark                                      6.89
 * 
 * The shipping and handling fee for an order is based on the total order price, as    shown in Table
 * 
 *          Price of Order ($)              Shipping and Handling ($)
 *          0-24.99                                   5.55
 *          25.00-49.99                           8.55
 *          50.00 or more                     11.55
 * 
 * Create the following classes: 
 * 
 * Gadget, which contains an item number, description, and price for a gadget; a constructor that sets all the fields; 
 * and get methods to retrieve the field values. 
 * 
 * Order, which contains an order number, customer name, and address (assume you need just a street address,
 * not city, state, and zip code); a list of item numbers ordered (up to four); the total price of all items ordered; and 
 * a shipping and handling fee for the order. Include a constructor to set the field values and get methods to retrieve
 * the field values. 
 * 
 * GadgetOrderTaker, which is an interactive application that takes four customer orders. The class contains an
 * array of the four Gadget objects offered (from Table). The application prompts each user for a name and street 
 * address and assigns a unique order number to each customer, starting with 101. The application asks each user
 * to enter an item number and quantity wanted. When the user enters 999 for the item number, the order is complete, 
 * and the next customer can enter data. Each customer can order up to four item numbers. When a customer’s order
 * is complete (the customer has entered 999 for an item number, or has ordered four different items), calculate the 
 * shipping and handling charges. After four customers have placed Orders, display each Order’s data, including the 
 * order number, the name and address of the customer, and the list of items ordered, including the item number, 
 * description, and price of each Order, the total price for the order, and the shipping and handling charge. 
 * The GadgetOrderTaker class handles all thrown Exceptions by displaying an explanatory message and ending 
 * the application. 
 * 
 * OrderException, which is an Exception that is created and thrown under any of the following conditions: 
 * A customer attempts to order more than four different items. 
 * A customer orders more than 100 of any item.
 * A customer enters an invalid item number. 
 * Also, catch the Exception generated by either of these conditions: 
 * A customer enters a nonnumeric character as the item number. 
 * A customer enters a nonnumeric character as the quantity. 
 * 
 * Save the files as Gadget.java, Order.java, GadgetOrderTaker.java, and OrderException.java. 
 * 
 */

public class GadgetOrderTaker {
    public static void main(String[] args)
    {
        int startingOrderNumber = 101;
        final int NUM_OF_CUSTOMER = 4;
        Scanner input = new Scanner(System.in);
        Order[] orders = new Order[4];
        int[] keys = {101, 124, 256, 512};
        Map<Integer, Gadget> gadgets = new HashMap<>(4);
        gadgets.put(101, new Gadget(101, "Electric hand warmer", 12.99));
        gadgets.put(124, new Gadget(124, "Battery-operated plant waterer ", 7.55));
        gadgets.put(256, new Gadget(256, "Gerbil trimmer", 9.99));
        gadgets.put(512, new Gadget(512, "Talking bookmark", 6.89));
        
        for(int i = 0; i < NUM_OF_CUSTOMER; i++)
        {
            int orderNumber;
            String customerName;
            String address;
            ArrayList<Integer> itemsOrdered = new ArrayList<>(4);
            double totalPrice = 0;
            double shippingAndHandlingFee;
            int choice;
            System.out.println("Enter customer " + i + " name:");
            customerName = input.next();         
            System.out.println("Enter customer " + i + " address:");
            address = input.next();
            do
            {
                System.out.println("Menu:");
                for(int k = 0; k < keys.length; k++)
                {
                    System.out.println(keys[k] + ". " + gadgets.get(keys[k]).getDescription() + " $" + gadgets.get(keys[k]).getPrice());
                }
                System.out.println("999. Quit");
                System.out.println("Enter your choice:");
                choice = input.nextInt();
                if(choice != 999) 
                {
                    itemsOrdered.add(choice);
                    try
                    {
                        System.out.println("Enter the quantity:");
                        int quantity = input.nextInt();
                        if(quantity > 100 || quantity < 1) throw new OrderException();
                        totalPrice += quantity * gadgets.get(choice).getPrice();
                    }
                    catch(OrderException e)
                    {
                        System.out.println(e.getMessage());
                    }
                }
            }while(itemsOrdered.size() < 4 && choice != 999);
            orderNumber = startingOrderNumber + i;
            if(totalPrice < 25) shippingAndHandlingFee = 5.55;
            else if(totalPrice < 50) shippingAndHandlingFee = 8.55;
            else shippingAndHandlingFee = 11.55;
            orders[i] = new Order(orderNumber, customerName, address, itemsOrdered, totalPrice, shippingAndHandlingFee);
        }
        for(int i = 0; i < NUM_OF_CUSTOMER; i++)
        {
            if(orders[i] != null)
            {
                System.out.println("Order number " + orders[i].getOrderNumber() + ":");
                System.out.println("Customer name: " + orders[i].getCustomerName());
                System.out.println("Customer address: " + orders[i].getAddress());
                ArrayList itemsOrdered = orders[i].getItemsOrdered();
                for(Object item : itemsOrdered) 
                {
                    System.out.println("           - " + item);
                }
                System.out.println("Total Price: " + orders[i].getTotalPrice());
                System.out.println("Shipping and handling fee: " + orders[i].getShippingAndHandlingFee());
                System.out.println();
            }
        }
    }    
}
